#!/bin/bash

# Script para compilar el kernel de ReactOS Rust con soporte Multiboot2
# Autor: ReactOS Rust Team

set -e

echo "üöÄ ReactOS Rust OS - Compilaci√≥n del Kernel Multiboot2"
echo "====================================================="
echo

# Cambiar al directorio ra√≠z del proyecto
cd "$(dirname "$0")/.."

echo "üìÅ Directorio de trabajo: $(pwd)"
echo

# Configuraci√≥n
KERNEL_NAME="reactos-rust-kernel-multiboot2"
TARGET="x86_64-unknown-linux-gnu"
BUILD_MODE="release"

# Funci√≥n para mostrar progreso
show_progress() {
    echo "üîß $1"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
}

# Funci√≥n para verificar dependencias
check_dependencies() {
    show_progress "Verificando dependencias"
    
    # Verificar que Rust est√© instalado
    if ! command -v cargo &> /dev/null; then
        echo "‚ùå Cargo no encontrado. Instalando Rust..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env
    else
        echo "‚úÖ Cargo encontrado"
    fi
    
    # Verificar que el target est√© instalado
    if ! rustup target list --installed | grep -q "$TARGET"; then
        echo "‚ùå Target $TARGET no instalado. Instalando..."
        rustup target add "$TARGET"
    else
        echo "‚úÖ Target $TARGET instalado"
    fi
    
    echo
}

# Funci√≥n para compilar el kernel
build_kernel() {
    show_progress "Compilando kernel con soporte Multiboot2"
    
    # Compilar el kernel
    if [ "$BUILD_MODE" = "release" ]; then
        echo "üî® Compilando en modo release..."
        cargo build --target "$TARGET" --release --bin "$KERNEL_NAME"
    else
        echo "üî® Compilando en modo debug..."
        cargo build --target "$TARGET" --bin "$KERNEL_NAME"
    fi
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Kernel compilado exitosamente"
    else
        echo "‚ùå Error compilando kernel"
        exit 1
    fi
    echo
}

# Funci√≥n para copiar el kernel compilado
copy_kernel() {
    show_progress "Copiando kernel compilado"
    
    # Crear directorio de salida si no existe
    mkdir -p "output/kernel"
    
    # Copiar el kernel compilado
    if [ "$BUILD_MODE" = "release" ]; then
        KERNEL_PATH="target/$TARGET/release/$KERNEL_NAME"
    else
        KERNEL_PATH="target/$TARGET/debug/$KERNEL_NAME"
    fi
    
    if [ -f "$KERNEL_PATH" ]; then
        cp "$KERNEL_PATH" "output/kernel/reactos-rust-kernel.bin"
        echo "‚úÖ Kernel copiado a output/kernel/reactos-rust-kernel.bin"
    else
        echo "‚ùå Kernel compilado no encontrado en $KERNEL_PATH"
        exit 1
    fi
    echo
}

# Funci√≥n para verificar el kernel
verify_kernel() {
    show_progress "Verificando kernel compilado"
    
    KERNEL_FILE="output/kernel/reactos-rust-kernel.bin"
    
    if [ -f "$KERNEL_FILE" ]; then
        echo "üìä Informaci√≥n del kernel:"
        echo "  üìÅ Archivo: $KERNEL_FILE"
        echo "  üìè Tama√±o: $(du -h "$KERNEL_FILE" | cut -f1)"
        echo "  üìÖ Fecha: $(date -r "$KERNEL_FILE")"
        echo "  üîç Tipo: $(file "$KERNEL_FILE")"
        echo
        echo "‚úÖ Kernel verificado correctamente"
    else
        echo "‚ùå Kernel no encontrado"
        exit 1
    fi
    echo
}

# Funci√≥n para crear ISO de prueba
create_test_iso() {
    show_progress "Creando ISO de prueba"
    
    # Verificar que el script de creaci√≥n de ISO exista
    if [ -f "scripts/create-grub-iso-optimized.sh" ]; then
        echo "üî® Creando ISO con GRUB..."
        ./scripts/create-grub-iso-optimized.sh
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ ISO creada exitosamente"
        else
            echo "‚ö†Ô∏è  Error creando ISO, pero el kernel est√° listo"
        fi
    else
        echo "‚ö†Ô∏è  Script de creaci√≥n de ISO no encontrado"
        echo "üí° El kernel est√° listo para usar con GRUB"
    fi
    echo
}

# Funci√≥n para mostrar informaci√≥n de uso
show_usage() {
    echo "üìã Informaci√≥n de uso:"
    echo
    echo "üéØ Kernel compilado:"
    echo "  ‚Ä¢ Archivo: output/kernel/reactos-rust-kernel.bin"
    echo "  ‚Ä¢ Compatible con: GRUB Multiboot2"
    echo "  ‚Ä¢ Arquitectura: x86_64"
    echo
    echo "üöÄ Para probar el kernel:"
    echo "  1. Crear ISO: ./scripts/create-grub-iso-optimized.sh"
    echo "  2. Probar en QEMU: qemu-system-x86_64 -cdrom reactos-rust-os-optimized.iso -m 512"
    echo "  3. O grabar en USB/CD y arrancar desde el dispositivo"
    echo
    echo "üîß Para desarrollo:"
    echo "  ‚Ä¢ Modo debug: ./scripts/build-kernel-multiboot2.sh --debug"
    echo "  ‚Ä¢ Modo release: ./scripts/build-kernel-multiboot2.sh --release"
    echo
}

# Funci√≥n principal
main() {
    echo "üéØ Iniciando compilaci√≥n del kernel Multiboot2..."
    echo
    
    # Parsear argumentos
    while [[ $# -gt 0 ]]; do
        case $1 in
            --debug)
                BUILD_MODE="debug"
                shift
                ;;
            --release)
                BUILD_MODE="release"
                shift
                ;;
            --help|-h)
                show_usage
                exit 0
                ;;
            *)
                echo "‚ùå Argumento desconocido: $1"
                echo "üí° Usa --help para ver opciones disponibles"
                exit 1
                ;;
        esac
    done
    
    echo "‚öôÔ∏è  Modo de compilaci√≥n: $BUILD_MODE"
    echo
    
    check_dependencies
    build_kernel
    copy_kernel
    verify_kernel
    create_test_iso
    show_usage
    
    echo "üéâ ¬°Kernel Multiboot2 compilado exitosamente!"
    echo
    echo "üìã Pr√≥ximos pasos:"
    echo "  1. Probar el kernel con GRUB"
    echo "  2. Verificar que se carga correctamente"
    echo "  3. Desarrollar m√°s funcionalidades del kernel"
    echo "  4. Integrar con el sistema de aplicaciones"
}

# Ejecutar funci√≥n principal
main "$@"
